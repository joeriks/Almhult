using EsentJsonStorage;
using Microsoft.AspNet.SignalR;
using Microsoft.Isam.Esent.Collections.Generic;
using Microsoft.Owin;
using Microsoft.Owin.Cors;
using Microsoft.Owin.FileSystems;
using Microsoft.Owin.StaticFiles;
using Owin;
using System;
using System.IO;

namespace SignalrDataSelfHost
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            app.Map("/signalr", map =>
            {
                map.UseCors(CorsOptions.AllowAll);
                var hubConfiguration = new HubConfiguration();                
                map.RunSignalR(hubConfiguration);
            });
            
            string contentPath = Path.Combine(Environment.CurrentDirectory, @"..\..");
            var baseUrl = "";
            app.UseStaticFiles(new Microsoft.Owin.StaticFiles.StaticFileOptions()
            {
                RequestPath = new PathString(baseUrl),
                FileSystem = new PhysicalFileSystem(contentPath)
            });

            //var formData = req;
            app.Run(async context =>
            {

                //IF your request method is 'POST' you can use ReadFormAsync() over request to read the form 
                //parameters
                if (context.Request.Method == "POST")
                {
                    var formData = await context.Request.ReadFormAsync();
                    //Do the necessary operation here. 
                    await context.Response.WriteAsync("Hello");
                }
            });
            

            app.UseHandlerAsync((req, res) =>
            {
                var split = req.Path.Split('/'); // resource/key/value [POST]
                if (split.Length == 4)
                {
                    var resource = split[1];
                    var key = split[2];
                    var value = split[3];                    

                    // flush seem to be necessary in this context for some reason
                    using (var store = Storage.GetStore(resource)) {
                        store.Set(key,value);
                        store.Dictionary.Flush();
                    }
                    return res.WriteAsync("Set " + resource + " " + key + " " + value);

                }
                if (split.Length == 3)
                {
                    var resource = split[1]; // resource/key [GET] 
                    var key = split[2];

                    if (req.Method == "POST")
                    {
            
                        
                    }

                    //using (var store = Storage.GetStore(resource))
                    //{
                    //    return res.WriteAsync(store.Get(key));
                    //}
                }
                if (split.Length == 2)
                {
                    var resource = split[1]; // resource [GET] 
                    using (var store = Storage.GetStore(resource))
                    {
                        return res.WriteAsync(store.All());
                    }
                    
                }
                return res.WriteAsync("Bad request");
            });
        }
    }

}
